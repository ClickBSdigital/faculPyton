# 97 - Verifique se um n√∫mero possui ao menos dois d√≠gitos iguais consecutivos
n = input("Digite um n√∫mero: ")

tem_repetido = any(n[i] == n[i+1] for i in range(len(n) - 1))

if tem_repetido:
    print("O n√∫mero possui d√≠gitos iguais consecutivos.")
else:
    print("N√£o h√° d√≠gitos iguais consecutivos.")
# =======================

# üß© Objetivo:
# Verificar se um n√∫mero digitado possui ao menos dois d√≠gitos iguais e consecutivos.

# Exemplos:
# 1223 ‚Üí ‚úÖ (os d√≠gitos 2 e 2 aparecem um ap√≥s o outro)

# 1234 ‚Üí ‚ùå (todos os d√≠gitos s√£o diferentes)

# 7788 ‚Üí ‚úÖ (tem dois pares consecutivos: 7 e 8 repetidos)

# 9090 ‚Üí ‚ùå (apesar de 9 aparecer duas vezes, n√£o √© consecutivo)

# üîç Explica√ß√£o do c√≥digo:

# n = input("Digite um n√∫mero: ")
# Aqui, a entrada √© recebida como texto (string).

# Isso facilita o acesso a cada d√≠gito individualmente com n[i].


# tem_repetido = any(n[i] == n[i+1] for i in range(len(n) - 1))
# Essa linha √© a mais poderosa e pode parecer confusa. Vamos destrinchar:

# for i in range(len(n) - 1):

# Percorre cada posi√ß√£o da string at√© a pen√∫ltima posi√ß√£o, para poder comparar com o pr√≥ximo caractere.

# n[i] == n[i+1]:

# Compara o d√≠gito atual com o pr√≥ximo d√≠gito.

# any(...):

# Retorna True se qualquer uma das compara√ß√µes for verdadeira (ou seja, encontrou dois d√≠gitos iguais consecutivos).

# ‚úÖ Se pelo menos uma vez n[i] == n[i+1], ent√£o tem_repetido ser√° True.


# if tem_repetido:
#     print("O n√∫mero possui d√≠gitos iguais consecutivos.")
# else:
#     print("N√£o h√° d√≠gitos iguais consecutivos.")
# Aqui, o resultado da verifica√ß√£o √© exibido de acordo com o valor da vari√°vel tem_repetido.

# ‚úÖ Exemplo com n = "5668":
# 5 == 6 ‚Üí ‚ùå

# 6 == 6 ‚Üí ‚úÖ (encontrado!)

# tem_repetido vira True